Mavan lifecycle:

The default Maven lifecycle consists of 8 major steps or phases for compiling, testing, building and installing
a given Java project as specified below:

Validate		:This step validates if the project structure is correct. 
			 For example – It checks if all the dependencies have been downloaded and are available in the local repository.
Compile		:It compiles the source code, converts the .java files to .class and stores the classes in target/classes folder.
Test			:It runs unit tests for the project.
Package		:This step packages the compiled code in distributable format like JAR or WAR.
Integration test	:It runs the integration tests for the project.
Verify		:This step runs checks to verify that the project is valid and meets the quality standards.
Install		:This step installs the packaged code to the local Maven repository.
Deploy		:It copies the packaged code to the remote repository for sharing it with other developers.

Maven follows a sequential order to execute the commands where if you run step n, all steps preceding
it (Step 1 to n-1) are also executed. For example – if we run the Installation step (Step 7), it will
validate, compile, package and verify the project along with running unit and integration tests (Step 1 to 6)
before installing the built package to the local repository.



Maven Commands:

mvn clean		: Cleans the project and removes all files generated by the previous build.
mvn compile		: Compiles source code of the project.
mvn test-compile	: Compiles the test source code.
mvn test		: Runs tests for the project.
mvn package		: Creates JAR or WAR file for the project to convert it into a distributable format.
mvn install		: Deploys the packaged JAR/ WAR file to the local repository.
mvn deploy		: Copies the packaged JAR/ WAR file to the remote repository after compiling, running tests and building the project.